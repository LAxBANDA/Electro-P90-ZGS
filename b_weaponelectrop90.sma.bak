/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <cstrike>
#include <fun>
#include <hamsandwich>
#include <engine>
#include <fakemeta>

#define PLUGIN "Weapon Electro P90 [ZGS]"
#define VERSION "1.0"
#define AUTHOR "LA BANDA"

new const g_sound_chispa[][] = { "buttons/spark1.wav", "buttons/spark2.wav", "buttons/spark3.wav", "buttons/spark4.wav" }

new m_beamSpr
new g_maxplayers
#define is_user_valid_connected(%1) (1 <= %1 <= g_maxplayers)
new g_electro_p90[33]
new Trie:g_tClaseSprite

public plugin_precache(){
	register_plugin(PLUGIN, VERSION, AUTHOR)
	g_tClaseSprite = TrieCreate() 
	RegisterHam(Ham_TraceAttack, "worldspawn", "fw_TraceAttack", 1) 
	TrieSetCell(g_tClaseSprite, "worldspawn", 1) 
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack", 1) 
	TrieSetCell(g_tClaseSprite, "player", 1) 
	register_forward(FM_Spawn, "Spawn", 1) 
	
	// Add your code here...
	m_beamSpr = precache_model("sprites/laserbeam.spr")
	g_maxplayers = get_maxplayers()
	
	for(new i = 0; i < sizeof g_sound_chispa - 1; i++)
		precache_sound(g_sound_chispa[i])
		
	register_clcmd("say /p90", "cmdSayP90")
}

public Spawn(iEnt) 
{ 
	if(is_valid_ent(iEnt)) 
	{
		static szClassName[32] 
		entity_get_string(iEnt, EV_SZ_classname, szClassName, charsmax(szClassName))
		
		if(!TrieKeyExists(g_tClaseSprite, szClassName)) 
		{ 
			RegisterHam(Ham_TraceAttack, szClassName, "fw_TraceAttack", 1) 
			TrieSetCell(g_tClaseSprite, szClassName, 1) 
		} 
	} 
} 
public plugin_end()
{
	TrieDestroy(g_tClaseSprite)
}

public cmdSayP90(id)
{
	give_item (id, "weapon_p90")
	cs_set_user_bpammo(id, CSW_P90, 100)
	g_electro_p90[id] = true
}

public fw_TraceAttack(victim, attacker, Float:damage, Float:direction[3], iTr, damage_type) 
{
	if(!is_user_valid_connected(attacker))
		return HAM_IGNORED
	
	if(get_user_weapon(attacker) != CSW_P90 && !g_electro_p90[attacker])
		return HAM_IGNORED
		
	static Float:vecEndPos[3], Float:origin[3]; 
	get_tr2(iTr, TR_vecEndPos, vecEndPos);
	entity_get_vector(attacker, EV_VEC_origin, origin)
	
	emit_sound( attacker, CHAN_VOICE, g_sound_chispa[random_num(0,3)], 1.0, ATTN_NORM, 0, PITCH_NORM )
	
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST,SVC_TEMPENTITY, vecEndPos, 0)
	write_byte(TE_SPARKS)                      
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	message_end()
		
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST, SVC_TEMPENTITY, vecEndPos, 0)
	write_byte(TE_SPARKS)
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	message_end()
	
	new vec1[3]
	get_user_origin(attacker, vec1, 1) // origin; your camera point.
	
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST,SVC_TEMPENTITY, vecEndPos, 0)
	write_byte(TE_ELIGHT)
	write_short(attacker | 0x1000)
	engfunc(EngFunc_WriteCoord, vec1[0])
	engfunc(EngFunc_WriteCoord, vec1[1])
	engfunc(EngFunc_WriteCoord, vec1[2])
	engfunc(EngFunc_WriteCoord, 15)
	write_byte(0)
	write_byte(128)
	write_byte(255)
	write_byte(1)
	engfunc(EngFunc_WriteCoord, 0)
	message_end()
		
	engfunc(EngFunc_MessageBegin, MSG_ALL, SVC_TEMPENTITY, vecEndPos, 0)
	write_byte(TE_DLIGHT) // TE id
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	write_byte(12) // radius
	write_byte(0) // r
	write_byte(128) // g
	write_byte(255) // b
	write_byte(10) // life
	write_byte(100) // decay rate
	message_end()
		
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST, SVC_TEMPENTITY, vecEndPos, 0)
	write_byte(TE_BEAMENTPOINT)
	write_short(attacker | 0x1000) 
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	write_short( m_beamSpr ) 
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(1) // life
	write_byte(7) // width
	write_byte(10) // noise
	write_byte( 128 )     // r, g, b
	write_byte( 255 )       // r, g, b
	write_byte( 255 )       // r, g, b
	write_byte( 255 ) // brightness
	write_byte( 128 ) // speed
	message_end()
	
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte(TE_BEAMENTPOINT)
	write_short(attacker | 0x1000) 
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	write_short( m_beamSpr ) 
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(1) // life
	write_byte(14) // width
	write_byte(8) // noise
	write_byte( 0 )     // r, g, b
	write_byte( 128 )       // r, g, b
	write_byte( 255 )       // r, g, b
	write_byte( 255 ) // brightness
	write_byte( 128 ) // speed
	message_end()
	
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte(TE_BEAMENTPOINT)
	write_short(attacker | 0x1000) 
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	write_short( m_beamSpr ) 
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(1) // life
	write_byte(2) // width
	write_byte(14) // noise
	write_byte( 0 )     // r, g, b
	write_byte( 0 )       // r, g, b
	write_byte( 255 )       // r, g, b
	write_byte( 255 ) // brightness
	write_byte( 128 ) // speed
	message_end()
		
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte(TE_BEAMENTPOINT)
	write_short(attacker | 0x1000) 
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	write_short( m_beamSpr ) 
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(1) // life
	write_byte(2) // width
	write_byte(14) // noise
	write_byte( 0 )     // r, g, b
	write_byte( 0 )       // r, g, b
	write_byte( 255 )       // r, g, b
	write_byte( 255 ) // brightness
	write_byte( 128 ) // speed
	message_end()
	
	
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte(TE_BEAMENTPOINT)
	write_short(attacker | 0x1000) 
	engfunc(EngFunc_WriteCoord, vecEndPos[0])
	engfunc(EngFunc_WriteCoord, vecEndPos[1])
	engfunc(EngFunc_WriteCoord, vecEndPos[2])
	write_short( m_beamSpr ) 
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(1) // life
	write_byte(2) // width
	write_byte(14) // noise
	write_byte( 0 )     // r, g, b
	write_byte( 0 )       // r, g, b
	write_byte( 255 )       // r, g, b
	write_byte( 255 ) // brightness
	write_byte( 128 ) // speed
	message_end()
		
	return PLUGIN_HANDLED
}
